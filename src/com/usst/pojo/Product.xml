<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.usst.pojo">
    <!--增-->
    <insert id="addProduct" parameterType="Product">
        INSERT INTO product_ ( name,price,cid ) VALUES (#{name},#{price},#{cid})
    </insert>
    <!--删-->
    <delete id="deleteProduct" parameterType="Product">
        delete FROM product_ WHERE id=#{id}
    </delete>
    <!--更-->
    <update id="updateProduct" parameterType="Product">
        UPDATE product_ set name=#{name},price=#{price},cid=#{cid} WHERE id=#{id}
    </update>
    <!--查-->
    <select id="getProduct" parameterType="_int" resultType="Product">
        SELECT * FROM product_ WHERE id=#{id}
    </select>
    <select id="listProductByName" resultType="Product">
        SELECT * FROM product_ WHERE name LIKE concat('%',#{name},'%')
    </select>
    <select id="listProductAll" resultType="Product">
        SELECT * FROM product_
    </select>

    <!--动态标签-->
    <select id="listProductByIf" resultType="Product">
        select * from   product_ WHERE 1=1
        <if test="name!=null">
            AND NAME LIKE concat('%',#{name},'%')
        </if>
        <if test="pricel!=0">
            AND price > #{price}
        </if>
    </select>
    <!--where标签会进行自动判断-->
    <!--如果任何条件都不成立，那么就在sql语句里就不会出现where关键字-->
    <!--如果有任何条件成立，会自动去掉多出来的 and 或者 or。-->
    <select id="listProductByWhere" resultType="Product">
        SELECT * FROM product_
        <where>
            <if test="name!=null">
                AND NAME LIKE concat('%',#{name},'%')
            </if>
            <if test="pricel!=0">
                AND price > #{price}
            </if>
        </where>
    </select>
    <!--set标签-->
    <select id="updateProductBySet" parameterType="Product">
        UPDATE product_
        <set>
            <if test="name != null">name=#{name},</if>
            <if test="price != null">price=#{price}</if>
        </set>
        WHERE id=#{id}
    </select>
    <!--when otherwise提供了任何条件，就进行条件查询(按配置顺序，只会选择一个条件)
    ，否则就使用id>1这个条件-->
    <select id="listProductByChoose" resultType="Product">
        SELECT * FROM product_
        <where>
            <choose>
                <when test="name != null">
                    and name like concat('%',#{name},'%')
                </when>
                <when test="price !=null and price != 0">
                    and price > #{price}
                </when>
                <otherwise>
                    and id >1
                </otherwise>
            </choose>
        </where>
    </select>

    <select id="listProductByForeach" resultType="Product">
        SELECT * FROM product_
          WHERE id IN
            <foreach collection="list" item="item" index="index"
                     open="(" separator="," close=")">
                #{item}
            </foreach>
    </select>
    <!--bind标签就像是再做一次字符串拼接，方便后续使用-->
    <select id="listProductByBind" resultType="Product">
        <bind name="likename" value="'%' + name + '%'"/>
        SELECT * FROM product_ WHERE NAME LIKE #{likename}
    </select>

    <resultMap id="productBean" type="Product">
        <id column="pid" property="id"/>
        <result column="pname" property="name"/>
        <result column="price" property="price"/>
        <!--多对一的关系-->
        <!--property:指的是属性名称,javaType:指的是属性的类型-->
        <association property="category" javaType="Category">
            <id column="cid" property="id"/>
            <result column="cname" property="name"/>
        </association>
    </resultMap>
    <!--根据id查询Product-->
    <select id="listProductMap" resultMap="productBean">
        SELECT c.*,p.*,c.id 'cid',p.id 'pid',c.name 'cname',p.name 'pname' FROM
        category_ c LEFT JOIN product_ p ON c.id = p.cid
    </select>
    <select id="getProductMap" resultMap="productBean">
        SELECT c.*,p.*,c.id 'cid',p.id 'pid',c.name 'cname',p.name 'pname'
        FROM category_ c LEFT JOIN product_ p ON c.id = p.cid WHERE p.id = #{id}
    </select>
</mapper>
